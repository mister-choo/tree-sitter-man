================================================================================
basic man page
================================================================================
GREP(1)                          User Commands                         GREP(1)

NAME
       grep - print lines that match patterns

SYNOPSIS
       grep [OPTION...] PATTERNS [FILE...]
       grep [OPTION...] -e PATTERNS ... [FILE...]
       grep [OPTION...] -f PATTERN_FILE ... [FILE...]

OPTIONS
   Generic Program Information
       --help Output a usage message and exit.

       -V, --version
              Output the version number of grep and exit.

       -c <name>=<value>
           Pass a configuration parameter to the command. The value given will
           override values from configuration files. The <name> is expected in

       --config-env=<name>=<envvar>
           Like -c <name>=<value>, give configuration variable <name> a value,
           where <envvar> is the name of an environment variable from which to
           retrieve the value. Unlike -c there is no shortcut for directly

       --help A thing

GNU grep 3.11                     2019-12-29                           GREP(1)

--------------------------------------------------------------------------------

(manual
  (title)
  (section_heading
    (section_title)
    (block))
  (section_heading
    (section_title)
    (block))
  (section_heading
    (section_title)
    (subsection_heading
      (subsection_title)
      (option_section
        (option))
      (option_section
        (option)
        (block))
      (option_section
        (option)
        (block))
      (option_section
        (option)
        (block))
      (option_section
        (option))))
  (footer))

================================================================================
more complex man page
================================================================================
GREP(1)                          User Commands                         GREP(1)

NAME
       grep - print lines that match patterns


ENVIRONMENT
       The   behavior  of  grep  is  affected  by  the  following  environment
       variables.

       The locale for category LC_foo is  specified  by  examining  the  three
       environment  variables  LC_ALL, LC_foo, LANG, in that order.  The first
       of these variables that is set specifies the locale.  For  example,  if
       LC_ALL  is not set, but LC_MESSAGES is set to pt_BR, then the Brazilian
       Portuguese locale is used for the LC_MESSAGES category.  The  C  locale
       is  used  if none of these environment variables are set, if the locale
       catalog is not installed, or if grep was  not  compiled  with  national
       language support (NLS).  The shell command locale -a lists locales that
       are currently available.

       GREP_COLORS
              Controls how the --color option highlights output.  Its value is
              a   colon-separated   list  of  capabilities  that  defaults  to
              ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36  with  the  rv
              and  ne  boolean  capabilities omitted (i.e., false).  Supported
              capabilities are as follows.

              sl=    SGR substring for whole selected  lines  (i.e.,  matching
                     lines when the -v command-line option is omitted, or non-
                     matching  lines  when  -v  is specified).  If however the
                     boolean rv capability and the -v command-line option  are
                     both  specified,  it  applies  to  context matching lines
                     instead.  The default  is  empty  (i.e.,  the  terminal's
                     default color pair).

DESCRIPTION
       Git is a fast, scalable, distributed revision control system with an
       unusually rich command set that provides both high-level operations and
       full access to internals.

       See gittutorial(7) to get started, then see giteveryday(7) for a useful
       minimum set of commands. The Git User’s Manual[1] has a more in-depth
       introduction.

SEE ALSO
   Regular Manual Pages
       awk(1), cmp(1), diff(1), read(2), pcre2(3), terminfo(5), glob(7),
       regex(7)

GNU grep 3.11                     2019-12-29                           GREP(1)
------------------------------------------------------------

(manual
  (title)
  (section_heading
    (section_title)
    (block))
  (section_heading
    (section_title)
    (block))
  (section_heading
    (section_title)
    (block
      (reference)
      (reference)))
  (section_heading
    (section_title)
    (subsection_heading
      (subsection_title)
      (block
        (reference)
        (reference)
        (reference)
        (reference)
        (reference)
        (reference)
        (reference)
        (reference))))
  (footer))

================================================================================
man page with program examples
================================================================================
wait(2)                       System Calls Manual                      wait(2)

NAME
       wait, waitpid, waitid - wait for process to change state

SYNOPSIS
       #include <sys/wait.h>

       pid_t wait(int *_Nullable wstatus);
       pid_t waitpid(pid_t pid, int *_Nullable wstatus, int options);

       int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
                       /* This is the glibc and POSIX interface; see
                          NOTES for information on the raw system call. */

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       waitid():
           Since glibc 2.26:
               _XOPEN_SOURCE >= 500 || _POSIX_C_SOURCE >= 200809L
           glibc 2.25 and earlier:
               _XOPEN_SOURCE
                   || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L
                   || /* glibc <= 2.19: */ _BSD_SOURCE

EXAMPLES
       The  following  program  demonstrates the use of fork(2) and waitpid().

   Program source

       #include <stdint.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <sys/wait.h>
       #include <unistd.h>

       int
       main(int argc, char *argv[])
       {
           int    wstatus;
           pid_t  cpid, w;

           cpid = fork();
           if (cpid == -1) {
               perror("fork");
               exit(EXIT_FAILURE);
           }

           if (cpid == 0) {            /* Code executed by child */
               printf("Child PID is %jd\n", (intmax_t) getpid());
               if (argc == 1)
                   pause();                    /* Wait for signals */
               _exit(atoi(argv[1]));

           } else {                    /* Code executed by parent */
               do {
                   w = waitpid(cpid, &wstatus, WUNTRACED | WCONTINUED);
                   if (w == -1) {
                       perror("waitpid");
                       exit(EXIT_FAILURE);
                   }

                   if (WIFEXITED(wstatus)) {
                       printf("exited, status=%d\n", WEXITSTATUS(wstatus));
                   } else if (WIFSIGNALED(wstatus)) {
                       printf("killed by signal %d\n", WTERMSIG(wstatus));
                   } else if (WIFSTOPPED(wstatus)) {
                       printf("stopped by signal %d\n", WSTOPSIG(wstatus));
                   } else if (WIFCONTINUED(wstatus)) {
                       printf("continued\n");
                   }
               } while (!WIFEXITED(wstatus) && !WIFSIGNALED(wstatus));
               exit(EXIT_SUCCESS);
           }
       }

SEE ALSO
       _exit(2), clone(2), fork(2),  kill(2),  ptrace(2),  sigaction(2),  sig‐
       nal(2), wait4(2), pthread_create(3), core(5), credentials(7), signal(7)

Linux man-pages 6.06              2023-10-31                           wait(2)
------------------------------------------------------------

(manual
  (title)
  (section_heading
    (section_title)
    (block))
  (section_heading
    (section_title)
    (block)
    (subsection_heading
      (subsection_title)
      (block)))
  (section_heading
    (section_title)
    (block
      (reference))
    (subsection_heading
      (subsection_title)
      (block)))
  (section_heading
    (section_title)
    (block
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)
      (reference)))
  (footer))
